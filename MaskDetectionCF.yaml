AWSTemplateFormatVersion: 2010-09-09

# Parameters
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  S3BucketName:
    Description: The bucket name of S3
    Type: String
    Default: 'wegmansmaskdetection'
    ConstraintDescription: When changing the name please also update the name in detectMasks.py and index.html in maskwebsite
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t2.micro:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-042e8287309f5df03



Resources:
  MaskDetectionServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key : Name
          Value : "MaskDetectionEC2"
      SecurityGroups: 
        - !Ref SecurityGroup
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch

  NotificationServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key : Name
          Value : "NotificationEC2"
      SecurityGroups: 
        - !Ref SecurityGroup
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
  
  SThreeBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl : "PublicRead"
      BucketName: !Ref S3BucketName

  SThreeBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: 
      - SThreeBucket
    Properties: 
      Bucket: !Ref S3BucketName
      PolicyDocument: 
        Version : '2012-10-17'
        Statement :
          - Action: 
              - 's3:GetObject'
            Sid : "PublicReadGetObject"
            Effect : "Allow"
            Principal: '*'
            Resource: !Join [ '', [ 'arn:aws:s3:::',!Ref S3BucketName, '/*' ] ]
  
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      OauthToken: "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"
      Repository : "https://github.com/arjunravikumar/maskDetectionWebsite"
      Name : "MaskDetectionWebsite"
      BuildSpec: |-
        version: 1
        frontend:
          phases:
            build:
              commands: []
          artifacts:
            baseDirectory: /
            files:
              - '**/*'
          cache:
            paths: []

  Branch:
    Type: AWS::Amplify::Branch
    Properties: 
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main


  SecurityGroup:
    Type:  AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Firewall exceptions
      SecurityGroupIngress:
        - CidrIp: !Ref SSHLocation
          Description: SSH
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: My Security Group

  myDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "time"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "time"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "10"
        WriteCapacityUnits: "10"
      TableName: "NotWornMask" 